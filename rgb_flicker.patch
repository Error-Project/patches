From 8b439b265941e11b02804fd834195efee600fc1b Mon Sep 17 00:00:00 2001
From: Mihir Sahay <mihir.sahay0123@hotmail.com>
Date: Fri, 18 Mar 2022 22:12:30 +0530
Subject: [PATCH] Revert "display: Add simple RGB color balance transform"

This reverts commit 8f035f7e7fa78a1053b1c6958634a3af9d85b84a.
---
 .../hardware/display/ColorDisplayManager.java |  40 -------
 .../display/IColorDisplayManager.aidl         |   5 +-
 core/java/android/provider/Settings.java      |  18 ---
 .../color/ColorBalanceTintController.java     | 107 ------------------
 .../display/color/ColorDisplayService.java    |  61 ----------
 .../color/DisplayTransformManager.java        |   4 -
 6 files changed, 1 insertion(+), 234 deletions(-)
 delete mode 100644 services/core/java/com/android/server/display/color/ColorBalanceTintController.java

diff --git a/core/java/android/hardware/display/ColorDisplayManager.java b/core/java/android/hardware/display/ColorDisplayManager.java
index 867e46d5b3fa..aafa7d520632 100644
--- a/core/java/android/hardware/display/ColorDisplayManager.java
+++ b/core/java/android/hardware/display/ColorDisplayManager.java
@@ -417,30 +417,6 @@ public boolean setAppSaturationLevel(@NonNull String packageName,
         return mManager.setAppSaturationLevel(packageName, saturationLevel);
     }
 
-    /**
-     * Set the global color balance for a specific RGB channel.
-     *
-     * @param channel RGB (0,1,2) channel to change
-     * @param value 0-255 (inclusive), where 255 is default balance
-     * @return whether the change was successful
-     * @hide
-     */
-    @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
-    public boolean setColorBalanceChannel(int channel, int value) {
-        return mManager.setColorBalanceChannel(channel, value);
-    }
-
-    /**
-     * Get the current global color balance for a specific RGB channel.
-     *
-     * @param channel RGB (0,1,2) channel to get the balance of
-     * @return weight of the channel, 0-255 (inclusive) where 255 is the default
-     * @hide
-     */
-    public int getColorBalanceChannel(int channel) {
-        return mManager.getColorBalanceChannel(channel);
-    }
-
     /**
      * Enables or disables display white balance.
      *
@@ -765,22 +741,6 @@ boolean setAppSaturationLevel(String packageName, int saturationLevel) {
             }
         }
 
-        boolean setColorBalanceChannel(int channel, int value) {
-            try {
-                return mCdm.setColorBalanceChannel(channel, value);
-            } catch (RemoteException e) {
-                throw e.rethrowFromSystemServer();
-            }
-        }
-
-        int getColorBalanceChannel(int channel) {
-            try {
-                return mCdm.getColorBalanceChannel(channel);
-            } catch (RemoteException e) {
-                throw e.rethrowFromSystemServer();
-            }
-        }
-
         boolean isDisplayWhiteBalanceEnabled() {
             try {
                 return mCdm.isDisplayWhiteBalanceEnabled();
diff --git a/core/java/android/hardware/display/IColorDisplayManager.aidl b/core/java/android/hardware/display/IColorDisplayManager.aidl
index f3c9c0e063ba..ef4f5f9b05e9 100644
--- a/core/java/android/hardware/display/IColorDisplayManager.aidl
+++ b/core/java/android/hardware/display/IColorDisplayManager.aidl
@@ -43,9 +43,6 @@ interface IColorDisplayManager {
     int getColorMode();
     void setColorMode(int colorMode);
 
-    int getColorBalanceChannel(int channel);
-    boolean setColorBalanceChannel(int channel, int value);
-
     boolean isDisplayWhiteBalanceEnabled();
     boolean setDisplayWhiteBalanceEnabled(boolean enabled);
 
@@ -54,4 +51,4 @@ interface IColorDisplayManager {
     int getReduceBrightColorsStrength();
     boolean setReduceBrightColorsStrength(int strength);
     float getReduceBrightColorsOffsetFactor();
-}
+}
\ No newline at end of file
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index a18bd3dbcd83..27be8186d6e4 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -10381,24 +10381,6 @@ public static boolean putFloatForUser(ContentResolver cr, String name, float val
         public static final String NIGHT_DISPLAY_LAST_ACTIVATED_TIME =
                 "night_display_last_activated_time";
 
-        /**
-         * Display color balance for the red channel, from 0 to 255.
-         * @hide
-         */
-        public static final String DISPLAY_COLOR_BALANCE_RED = "display_color_balance_red";
-
-        /**
-         * Display color balance for the green channel, from 0 to 255.
-         * @hide
-         */
-        public static final String DISPLAY_COLOR_BALANCE_GREEN = "display_color_balance_green";
-
-        /**
-         * Display color balance for the blue channel, from 0 to 255.
-         * @hide
-         */
-        public static final String DISPLAY_COLOR_BALANCE_BLUE = "display_color_balance_blue";
-
         /**
          * Control whether display white balance is currently enabled.
          * @hide
diff --git a/services/core/java/com/android/server/display/color/ColorBalanceTintController.java b/services/core/java/com/android/server/display/color/ColorBalanceTintController.java
deleted file mode 100644
index 5b5ef7ffb619..000000000000
--- a/services/core/java/com/android/server/display/color/ColorBalanceTintController.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (C) 2019 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.server.display.color;
-
-import static com.android.server.display.color.DisplayTransformManager.LEVEL_COLOR_MATRIX_COLOR_BALANCE;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.hardware.display.ColorDisplayManager;
-import android.opengl.Matrix;
-import android.provider.Settings;
-
-import java.util.Arrays;
-
-/** Control the color transform for global color balance. */
-final class ColorBalanceTintController extends TintController {
-
-    private final float[] mMatrix = new float[16];
-    private boolean mNeedsLinear;
-
-    @Override
-    public void setUp(Context context, boolean needsLinear) {
-        mNeedsLinear = needsLinear;
-    }
-
-    @Override
-    public float[] getMatrix() {
-        return Arrays.copyOf(mMatrix, mMatrix.length);
-    }
-
-    @Override
-    public void setMatrix(int rgb) {
-        Matrix.setIdentityM(mMatrix, 0);
-
-        float red = ((float) Color.red(rgb)) / 255.0f;
-        float green = ((float) Color.green(rgb)) / 255.0f;
-        float blue = ((float) Color.blue(rgb)) / 255.0f;
-
-        if (!mNeedsLinear) {
-            // Convert to non-linear sRGB as the assumed native color space
-            red = linearToSrgb(red);
-            green = linearToSrgb(green);
-            blue = linearToSrgb(blue);
-        }
-
-        mMatrix[0] = red;
-        mMatrix[5] = green;
-        mMatrix[10] = blue;
-    }
-
-    @Override
-    public int getLevel() {
-        return LEVEL_COLOR_MATRIX_COLOR_BALANCE;
-    }
-
-    @Override
-    public boolean isAvailable(Context context) {
-        return ColorDisplayManager.isColorTransformAccelerated(context);
-    }
-
-    public void updateBalance(Context context, int userId) {
-        int red = Settings.Secure.getIntForUser(context.getContentResolver(), channelToKey(0),
-                255, userId);
-        int green = Settings.Secure.getIntForUser(context.getContentResolver(), channelToKey(1),
-                255, userId);
-        int blue = Settings.Secure.getIntForUser(context.getContentResolver(), channelToKey(2),
-                255, userId);
-
-        int rgb = Color.rgb(red, green, blue);
-        setMatrix(rgb);
-    }
-
-    public static String channelToKey(int channel) {
-        switch (channel) {
-            case 0:
-                return Settings.Secure.DISPLAY_COLOR_BALANCE_RED;
-            case 1:
-                return Settings.Secure.DISPLAY_COLOR_BALANCE_GREEN;
-            case 2:
-                return Settings.Secure.DISPLAY_COLOR_BALANCE_BLUE;
-            default:
-                throw new IllegalArgumentException("Unknown channel: " + channel);
-        }
-    }
-
-    private static float linearToSrgb(float x) {
-        if (x >= 0.0031308) {
-            return (1.055f) * ((float) Math.pow(x, 1.0f / 2.4f)) - 0.055f;
-        } else {
-            return 12.92f * x;
-        }
-    }
-}
diff --git a/services/core/java/com/android/server/display/color/ColorDisplayService.java b/services/core/java/com/android/server/display/color/ColorDisplayService.java
index c188d182daea..579cec1b60da 100644
--- a/services/core/java/com/android/server/display/color/ColorDisplayService.java
+++ b/services/core/java/com/android/server/display/color/ColorDisplayService.java
@@ -119,7 +119,6 @@
     private static final int MSG_APPLY_GLOBAL_SATURATION = 4;
     private static final int MSG_APPLY_DISPLAY_WHITE_BALANCE = 5;
     private static final int MSG_APPLY_REDUCE_BRIGHT_COLORS = 6;
-    private static final int MSG_APPLY_DISPLAY_COLOR_BALANCE = 7;
 
     /**
      * Return value if a setting has not been set.
@@ -158,8 +157,6 @@
             new DisplayWhiteBalanceTintController();
     private final NightDisplayTintController mNightDisplayTintController =
             new NightDisplayTintController();
-    private final ColorBalanceTintController mColorBalanceTintController =
-            new ColorBalanceTintController();
     private final TintController mGlobalSaturationTintController =
             new GlobalSaturationTintController();
     private final ReduceBrightColorsTintController mReduceBrightColorsTintController =
@@ -354,11 +351,6 @@ public void onChange(boolean selfChange, Uri uri) {
                             case Secure.ACCESSIBILITY_DISPLAY_DALTONIZER:
                                 onAccessibilityDaltonizerChanged();
                                 break;
-                            case Secure.DISPLAY_COLOR_BALANCE_RED:
-                            case Secure.DISPLAY_COLOR_BALANCE_BLUE:
-                            case Secure.DISPLAY_COLOR_BALANCE_GREEN:
-                                mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_COLOR_BALANCE);
-                                break;
                             case Secure.DISPLAY_WHITE_BALANCE_ENABLED:
                                 updateDisplayWhiteBalanceStatus();
                                 break;
@@ -395,12 +387,6 @@ public void onChange(boolean selfChange, Uri uri) {
                 false /* notifyForDescendants */, mContentObserver, mCurrentUser);
         cr.registerContentObserver(Secure.getUriFor(Secure.ACCESSIBILITY_DISPLAY_DALTONIZER),
                 false /* notifyForDescendants */, mContentObserver, mCurrentUser);
-        cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_COLOR_BALANCE_RED),
-                false /* notifyForDescendants */, mContentObserver, mCurrentUser);
-        cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_COLOR_BALANCE_GREEN),
-                false /* notifyForDescendants */, mContentObserver, mCurrentUser);
-        cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_COLOR_BALANCE_BLUE),
-                false /* notifyForDescendants */, mContentObserver, mCurrentUser);
         cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_WHITE_BALANCE_ENABLED),
                 false /* notifyForDescendants */, mContentObserver, mCurrentUser);
         cr.registerContentObserver(Secure.getUriFor(Secure.REDUCE_BRIGHT_COLORS_ACTIVATED),
@@ -455,10 +441,6 @@ public void onChange(boolean selfChange, Uri uri) {
                 mHandler.sendEmptyMessage(MSG_APPLY_REDUCE_BRIGHT_COLORS);
             }
         }
-
-        if (mColorBalanceTintController.isAvailable(getContext())) {
-            mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_COLOR_BALANCE);
-        }
     }
 
     private void tearDown() {
@@ -1024,25 +1006,6 @@ private boolean isColorModeAvailable(@ColorMode int colorMode) {
         return false;
     }
 
-    private boolean setColorBalanceChannelInternal(int channel, int value) {
-        if (mCurrentUser == UserHandle.USER_NULL) {
-            return false;
-        }
-
-        boolean putSuccess = Secure.putIntForUser(getContext().getContentResolver(),
-                ColorBalanceTintController.channelToKey(channel), value, mCurrentUser);
-        if (putSuccess) {
-            mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_COLOR_BALANCE);
-        }
-
-        return putSuccess;
-    }
-
-    private int getColorBalanceChannelInternal(int channel) {
-        return Secure.getIntForUser(getContext().getContentResolver(),
-                ColorBalanceTintController.channelToKey(channel), 255, mCurrentUser);
-    }
-
     private void dumpInternal(PrintWriter pw) {
         pw.println("COLOR DISPLAY MANAGER dumpsys (color_display)");
 
@@ -1633,10 +1596,6 @@ public void handleMessage(Message msg) {
                 case MSG_APPLY_DISPLAY_WHITE_BALANCE:
                     applyTint(mDisplayWhiteBalanceTintController, false);
                     break;
-                case MSG_APPLY_DISPLAY_COLOR_BALANCE:
-                    mColorBalanceTintController.updateBalance(getContext(), mCurrentUser);
-                    applyTint(mColorBalanceTintController, true);
-                    break;
             }
         }
     }
@@ -1878,26 +1837,6 @@ public Time getNightDisplayCustomEndTime() {
             }
         }
 
-        @Override
-        public boolean setColorBalanceChannel(int channel, int value) {
-            final long token = Binder.clearCallingIdentity();
-            try {
-                return setColorBalanceChannelInternal(channel, value);
-            } finally {
-                Binder.restoreCallingIdentity(token);
-            }
-        }
-
-        @Override
-        public int getColorBalanceChannel(int channel) {
-            final long token = Binder.clearCallingIdentity();
-            try {
-                return getColorBalanceChannelInternal(channel);
-            } finally {
-                Binder.restoreCallingIdentity(token);
-            }
-        }
-
         @Override
         public boolean setDisplayWhiteBalanceEnabled(boolean enabled) {
             getContext().enforceCallingOrSelfPermission(
diff --git a/services/core/java/com/android/server/display/color/DisplayTransformManager.java b/services/core/java/com/android/server/display/color/DisplayTransformManager.java
index 9955a70ae4fa..5c68c51ad7a3 100644
--- a/services/core/java/com/android/server/display/color/DisplayTransformManager.java
+++ b/services/core/java/com/android/server/display/color/DisplayTransformManager.java
@@ -66,10 +66,6 @@
      * Color transform level used by A11y services to invert the display colors.
      */
     public static final int LEVEL_COLOR_MATRIX_INVERT_COLOR = 300;
-    /**
-     * Color transform level used to adjust the color balance of the display.
-     */
-    public static final int LEVEL_COLOR_MATRIX_COLOR_BALANCE = 400;
 
     private static final int SURFACE_FLINGER_TRANSACTION_COLOR_MATRIX = 1015;
     private static final int SURFACE_FLINGER_TRANSACTION_DALTONIZER = 1014;